//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDatabaseManager")]
    public interface IDatabaseManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/addTag", ReplyAction="http://tempuri.org/IDatabaseManager/addTagResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Model.InputTag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Model.DigitalInput))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Model.AnalogInput))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Model.OutputTag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Model.DigitalOutput))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Model.AnalogOutput))]
        bool addTag(Model.Tag t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/addTag", ReplyAction="http://tempuri.org/IDatabaseManager/addTagResponse")]
        System.Threading.Tasks.Task<bool> addTagAsync(Model.Tag t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeTag", ReplyAction="http://tempuri.org/IDatabaseManager/removeTagResponse")]
        bool removeTag(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeTag", ReplyAction="http://tempuri.org/IDatabaseManager/removeTagResponse")]
        System.Threading.Tasks.Task<bool> removeTagAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/setTagScan", ReplyAction="http://tempuri.org/IDatabaseManager/setTagScanResponse")]
        bool setTagScan(string id, bool scan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/setTagScan", ReplyAction="http://tempuri.org/IDatabaseManager/setTagScanResponse")]
        System.Threading.Tasks.Task<bool> setTagScanAsync(string id, bool scan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/setOutputTagValue", ReplyAction="http://tempuri.org/IDatabaseManager/setOutputTagValueResponse")]
        bool setOutputTagValue(string id, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/setOutputTagValue", ReplyAction="http://tempuri.org/IDatabaseManager/setOutputTagValueResponse")]
        System.Threading.Tasks.Task<bool> setOutputTagValueAsync(string id, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/showOutputTagValues", ReplyAction="http://tempuri.org/IDatabaseManager/showOutputTagValuesResponse")]
        string showOutputTagValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/showOutputTagValues", ReplyAction="http://tempuri.org/IDatabaseManager/showOutputTagValuesResponse")]
        System.Threading.Tasks.Task<string> showOutputTagValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/addTagAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/addTagAlarmResponse")]
        bool addTagAlarm(string id, Model.AlarmType alarmType, double limit, Model.AlarmPriority priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/addTagAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/addTagAlarmResponse")]
        System.Threading.Tasks.Task<bool> addTagAlarmAsync(string id, Model.AlarmType alarmType, double limit, Model.AlarmPriority priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/deleteTagAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/deleteTagAlarmResponse")]
        bool deleteTagAlarm(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/deleteTagAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/deleteTagAlarmResponse")]
        System.Threading.Tasks.Task<bool> deleteTagAlarmAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerChannel : DatabaseManager.ServiceReference1.IDatabaseManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerClient : System.ServiceModel.ClientBase<DatabaseManager.ServiceReference1.IDatabaseManager>, DatabaseManager.ServiceReference1.IDatabaseManager {
        
        public DatabaseManagerClient() {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool addTag(Model.Tag t) {
            return base.Channel.addTag(t);
        }
        
        public System.Threading.Tasks.Task<bool> addTagAsync(Model.Tag t) {
            return base.Channel.addTagAsync(t);
        }
        
        public bool removeTag(string id) {
            return base.Channel.removeTag(id);
        }
        
        public System.Threading.Tasks.Task<bool> removeTagAsync(string id) {
            return base.Channel.removeTagAsync(id);
        }
        
        public bool setTagScan(string id, bool scan) {
            return base.Channel.setTagScan(id, scan);
        }
        
        public System.Threading.Tasks.Task<bool> setTagScanAsync(string id, bool scan) {
            return base.Channel.setTagScanAsync(id, scan);
        }
        
        public bool setOutputTagValue(string id, double value) {
            return base.Channel.setOutputTagValue(id, value);
        }
        
        public System.Threading.Tasks.Task<bool> setOutputTagValueAsync(string id, double value) {
            return base.Channel.setOutputTagValueAsync(id, value);
        }
        
        public string showOutputTagValues() {
            return base.Channel.showOutputTagValues();
        }
        
        public System.Threading.Tasks.Task<string> showOutputTagValuesAsync() {
            return base.Channel.showOutputTagValuesAsync();
        }
        
        public bool addTagAlarm(string id, Model.AlarmType alarmType, double limit, Model.AlarmPriority priority) {
            return base.Channel.addTagAlarm(id, alarmType, limit, priority);
        }
        
        public System.Threading.Tasks.Task<bool> addTagAlarmAsync(string id, Model.AlarmType alarmType, double limit, Model.AlarmPriority priority) {
            return base.Channel.addTagAlarmAsync(id, alarmType, limit, priority);
        }
        
        public bool deleteTagAlarm(string id) {
            return base.Channel.deleteTagAlarm(id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteTagAlarmAsync(string id) {
            return base.Channel.deleteTagAlarmAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAuthentication")]
    public interface IAuthentication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Registration", ReplyAction="http://tempuri.org/IAuthentication/RegistrationResponse")]
        bool Registration(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Registration", ReplyAction="http://tempuri.org/IAuthentication/RegistrationResponse")]
        System.Threading.Tasks.Task<bool> RegistrationAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Login", ReplyAction="http://tempuri.org/IAuthentication/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Login", ReplyAction="http://tempuri.org/IAuthentication/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Logout", ReplyAction="http://tempuri.org/IAuthentication/LogoutResponse")]
        bool Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Logout", ReplyAction="http://tempuri.org/IAuthentication/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/UserDatabaseEmpty", ReplyAction="http://tempuri.org/IAuthentication/UserDatabaseEmptyResponse")]
        bool UserDatabaseEmpty();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/UserDatabaseEmpty", ReplyAction="http://tempuri.org/IAuthentication/UserDatabaseEmptyResponse")]
        System.Threading.Tasks.Task<bool> UserDatabaseEmptyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/IsAdmin", ReplyAction="http://tempuri.org/IAuthentication/IsAdminResponse")]
        bool IsAdmin(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/IsAdmin", ReplyAction="http://tempuri.org/IAuthentication/IsAdminResponse")]
        System.Threading.Tasks.Task<bool> IsAdminAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationChannel : DatabaseManager.ServiceReference1.IAuthentication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationClient : System.ServiceModel.ClientBase<DatabaseManager.ServiceReference1.IAuthentication>, DatabaseManager.ServiceReference1.IAuthentication {
        
        public AuthenticationClient() {
        }
        
        public AuthenticationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Registration(string username, string password) {
            return base.Channel.Registration(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrationAsync(string username, string password) {
            return base.Channel.RegistrationAsync(username, password);
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool Logout(string token) {
            return base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
        
        public bool UserDatabaseEmpty() {
            return base.Channel.UserDatabaseEmpty();
        }
        
        public System.Threading.Tasks.Task<bool> UserDatabaseEmptyAsync() {
            return base.Channel.UserDatabaseEmptyAsync();
        }
        
        public bool IsAdmin(string token) {
            return base.Channel.IsAdmin(token);
        }
        
        public System.Threading.Tasks.Task<bool> IsAdminAsync(string token) {
            return base.Channel.IsAdminAsync(token);
        }
    }
}
